access_by_lua_block {
    local opts = {
        redirect_uri = os.getenv("KEYCLOAK_AUTH_REDIRECT_URI"),
        discovery = os.getenv("KEYCLOAK_AUTH_URL") .. "/realms/" .. os.getenv("KEYCLOAK_AUTH_REALM") .. "/.well-known/openid-configuration",
        client_id = os.getenv("KEYCLOAK_CLIENT_ID"),
        client_secret = os.getenv("KEYCLOAK_CLIENT_SECRET"),
        session_contents = {id_token=true, access_token=true},
        ssl_verify = "no",
        token_endpoint_auth_method = "client_secret_basic"
    }

    local headers = ngx.req.get_headers()
    local auth_header = headers["Authorization"]
    if not auth_header or not auth_header:find("Basic ") then
        ngx.header["WWW-Authenticate"] = 'Basic realm="Restricted"'
        ngx.log(ngx.ERR, "Authorization Basic header not found")
        ngx.exit(ngx.HTTP_UNAUTHORIZED)
    end

    local b64 = require("ngx.base64")
    local decoded = b64.decode_base64url(auth_header:sub(7))
    local username, password = decoded:match("([^:]+):(.+)")
    if not username or not password then
        ngx.log(ngx.ERR, "Authorization Basic username and/or password not found")
        ngx.exit(ngx.HTTP_UNAUTHORIZED)
    end

    # TODO: this is not working yet
    local res, err = require("resty.openidc").authenticate(opts, {grant_type = "password", username = username, password = password})

    if err then
      ngx.status = 401
      ngx.log(ngx.ERR, "Error during authentication: " .. err)
      ngx.exit(ngx.HTTP_UNAUTHORIZED)
    end

    ngx.req.set_header("Authorization", "Bearer " .. res.access_token)
    ngx.req.set_header("X-Remote-User", res.id_token.preferred_username)
    ngx.req.set_header("X-Forwarded-User", res.id_token.preferred_username)
}
