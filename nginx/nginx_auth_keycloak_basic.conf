access_by_lua_block {

    local headers = ngx.req.get_headers()
    local auth_header = headers["Authorization"]
    if not auth_header or not auth_header:find("Basic ") then
        ngx.header["WWW-Authenticate"] = 'Basic realm="Restricted"'
        ngx.log(ngx.ERR, "Authorization Basic header not found")
        ngx.exit(ngx.HTTP_UNAUTHORIZED)
    end

    local b64 = require("ngx.base64")
    local decoded = b64.decode_base64url(auth_header:sub(7))
    local username, password = decoded:match("([^:]+):(.+)")
    if not username or not password then
        ngx.log(ngx.ERR, "Authorization Basic username and/or password not found")
        ngx.exit(ngx.HTTP_UNAUTHORIZED)
    end

    local http = require("resty.http")
    local httpc = http.new()

    local keycloak_token_url = os.getenv("KEYCLOAK_AUTH_URL") .. "/realms/" .. os.getenv("KEYCLOAK_AUTH_REALM") .. "/protocol/openid-connect/token"
    local res, err = httpc:request_uri(keycloak_token_url, {
        method = "POST",
        body = ngx.encode_args({
            grant_type = "password",
            client_id = os.getenv("KEYCLOAK_CLIENT_ID"),
            client_secret = os.getenv("KEYCLOAK_CLIENT_SECRET"),
            username = username,
            password = password
        }),
        headers = {
            ["Content-Type"] = "application/x-www-form-urlencoded"
        },
        ssl_verify = false
    })

    if res then
        httpc:set_keepalive(60000, 10)
    else
        ngx.log(ngx.ERR, "Error getting access token: " .. err)
        ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
    end

    local cjson = require("cjson.safe")
    local token_response = cjson.decode(res.body)

    if not token_response or not token_response.access_token then
        ngx.log(ngx.ERR, "Failed to get access token: " .. (res.body or "No response body"))
        ngx.exit(ngx.HTTP_UNAUTHORIZED)
    end

    -- TODO: some sort of token caching to avoid burdening keycloak?

    ngx.req.set_header("X-Remote-User", username)
    ngx.req.set_header("X-Forwarded-User", username)
    ngx.req.set_header("Authorization", "Bearer " .. token_response.access_token)
}
